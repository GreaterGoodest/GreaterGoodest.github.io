<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Goodest Blog</title>
    <link>https://GreaterGoodest.github.io/</link>
    <description>Recent content on Goodest Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Nov 2021 13:00:44 -0600</lastBuildDate><atom:link href="https://GreaterGoodest.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ELF Science Part 1</title>
      <link>https://GreaterGoodest.github.io/post/elf_science_p1/</link>
      <pubDate>Fri, 12 Nov 2021 13:00:44 -0600</pubDate>
      
      <guid>https://GreaterGoodest.github.io/post/elf_science_p1/</guid>
      <description>Introduction Prereqs:
 C Python Mimimal x86 Some flavor of 64 bit linux (I&amp;rsquo;ll be using Debian)  All code described can be found here
One of the most difficult parts of creating offensive tools is preventing detection. Even if you employ the most advanced methodologies available, your tool will likely be detected eventually. At this point, the goal becomes making the analyst/reversers life as difficult as possible.
There are a number of ways of doing this, including breaking your payload up into smaller chunks to limit exposure and loading functionality at runtime.</description>
    </item>
    
  </channel>
</rss>
